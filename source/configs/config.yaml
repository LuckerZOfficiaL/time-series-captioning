general:
  random_seed: 42

data:
  dataset_names: [air quality, border crossing, crime, demography]
  request_augmentations: 0 # how many times to rephrase the original prompt request?
  n_samples: 100 # how many window samples to extract per dataset? i.e. how many time series to sample? Note that this is just the number of real samples and not the number of captions because each model in used_models generates its version of the caption. So, the number of captions generated will be n_samples*len(used_models).
  save_top_k: 0 # save the top k best captions based on the ranking, if it's 0 or negative, don't do top-k. If top-k is on, caption ranking is invoked
  external_knowledge: False # if the captions should be generated with oracle's external knowledge

model:
  all_models: [Google Gemini-2.0-Flash, Online Gemini-2.0-Flash, OpenAI GPT-4o, Anthropic Claude-3.5, Ollama llama3.3, Ollama gemma3, Ollama mixtral 8x7b, Ollama mixtral 8x22b, Ollama qwen2.5-1m:14b, Ollama nemotron, Ollama llama3.2 uncensored, Ollama qwq, Ollama deepseek-r1:14b, Ollama phi4, Ollama lumimaid-v0.2:12b, GPT-4o, Claude-3.5-Haiku, Gemini-1.5-Flash, Gemini-1.5-Pro, DeepSeek-R1-FW] # available model choices, the first two are from official APIs
  used_models: [OpenAI GPT-4o, Anthropic Claude-3.5, Google Gemini-2.0-Flash] # models to use for generating captions
  refinement_model: Google Gemini-2.0-Flash
  checking_model: Ollama qwen2.5-1m:14b
  extraction_model: Google Gemini-2.0-Flash
  ranking_model: OpenAI GPT-4o # the model used to rank the captions
  embedding_model: all-MiniLM-L6-v2 # the sentence transformer model used for embeddings in RAG
  remove_common_sense_model: Google Gemini-2.0-Flash #"OpenAI GPT-4o" #"Gemini-2.0-Flash"
  temperature: null # set this to null to keep default settings. If this is set, the temperature of all calls is forced to be this

refinement:
  refinement_types: [add facts, change style, enrich language, factual checking]
  refinement_type: add facts
  desired_style: casual # matters only if refinement_type == change style
  refinement_target: raw  #raw, rag, refined/add facts ----- What captions to refine?
  batch_size: 5 # how many facts to present to the LLM in each prompt for removing common sense and checking facts?
  factual_correction_method: llm # fill in the gap
  skip_numeric: True # whether to skip numeric statements in factual checking, so that they get all preserved
  words_to_skip: [average, mean, standard deviation, above, below, all-time, increas,declin,decreas, series, fluctuat, half, double, triple]
  remove_source: True
  use_confidence_checking: False
  confidence_thresh: 70


factcheck:
  start_from_files: True # If False, the benchmark starts by applying our fake detection method and save the txt files. If True, it starts by reading the txt files instead of re-generating the facts
  save_files: True # whether to store the facts into files

path: # paths that have "folder" in its name are folder paths, otherwise they are file paths
  caption_folder_path: /home/ubuntu/thesis/data/samples/captions
  ts_folder_path: /home/ubuntu/thesis/data/samples/time series
  plot_folder_path: /home/ubuntu/thesis/data/samples/plots
  refined_captions_folder_path: /home/ubuntu/thesis/data/samples/captions/refined
  verified_captions_folder_path: /home/ubuntu/thesis/data/samples/captions/verified
  extracted_facts_folder_path: /home/ubuntu/thesis/data/samples/captions/extracted facts
  filtered_facts_folder_path: /home/ubuntu/thesis/data/samples/captions/filtered facts
  fact_bank_folder_path: /home/ubuntu/thesis/data/fact bank
  all_facts_path: /home/ubuntu/thesis/data/fact bank/all_facts.txt
  all_facts_no_common_sense_path: /home/ubuntu/thesis/data/fact bank/all_facts_no_common_sense.txt
  all_facts_by_period_folder_path: /home/ubuntu/thesis/data/fact bank/by period #/{BIN_YEARS}/all_facts_by_{BIN_YEARS}years.json
  prototypes_path: /home/ubuntu/thesis/model/prototype_words.txt

mobtep:
  output_text: False # if False, it outputs the fused and aligned embedding
  tcn_emb_size: 128
  use_linear_proj: False
  max_output_tokens: 100
  anchor_words: [ stabilize, spike, increase, drop, plateau, fluctuate, in the beginning, sudden rise, peak, valley, steady growth, sharp decline, gradual increase, gradual decrease, oscillate, volatile, steady, outlier, anomaly, trend, seasonal, cyclical, mean-reverting, acceleration, deceleration, surge, dip, persistent, transient, burst, regression, correlation, autoregressive, dampening, converge, diverge, periodic, non-stationary, stationary, residual, cumulative, saturation, uptrend, downtrend, breakout, shock, rebound, flatten, persist, retrace, noise, random walk, drift, inflection point, moving average, momentum, overshoot, undershoot, lagging, leading, slope, spurt, compression, expansion, volatility cluster, reversal, lag, contraction, extension, signal, mean shift, jump, long-term, short-term, irregular, knee point, asymptote, equilibrium, breaking point, threshold, compression, dilation, decay, growth rate, exponential rise, logarithmic growth, relative change, absolute change, tipping point, structural break, convex, concave, random fluctuation, cyclicality, persistent oscillation, transient spike ]

train:
  lr: 1e-5
  epochs: 5
  batch_size: 4
  loss_fn: cross-entropy
  teacher_forcing: True


nlp:
 synonym_similarity_thresh: 0.7

plot:
  height: 5
  width: 7

rag:
  use_rag: False # whether to apply RAG on caption generation, it will only retrieve the facts that are temporally relevant to the prompt request.
  rag_top_k: 5 # how many top-relevant facts to retrieve from the bank

bank:
  save_pca: True # whether to save the 2D PCA of fact embeddings as a jpeg file
  bin_years: 10 # how long is a single period in years?

  